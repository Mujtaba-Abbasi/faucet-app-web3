{
  "contractName": "Logger",
  "abi": [
    {
      "inputs": [],
      "name": "emitLog",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"emitLog\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Logger.sol\":\"Logger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Logger.sol\":{\"keccak256\":\"0x861d2a5ed2769d7b26218abd7f073ab780ca0b98dbae8a6a9bbdac49aee2e6b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e4e1dbf0f41998f64a29fc38a75ac5cf7c58b2dfa61c772169a243d2791e0db\",\"dweb:/ipfs/QmdK23s16MoWL7h48WSEZ3QYAT7DyMz5KmCYCFCWBoMNXt\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract Logger {\r\n    function emitLog() public pure virtual returns (bytes32);\r\n\r\n    function test3() internal pure returns (uint256) {\r\n        return 200;\r\n    }\r\n}\r\n\r\n/*\r\nSimilar to C++ : when we creat an abstract interface containing\r\nan virtual function without any implementation\r\nthis will be implemented in the contract that in inheriting this abstract interface.\r\npure: doesn't make any changes to the state */\r\n\r\n//* private : Can only be accessed within the contract\r\n//* internal : Can only be accessed within the contracts that are inheriting from this\r\n//* public : Can only access from anywhere\r\n//* external : can be accessed by other contracts\r\n",
  "sourcePath": "D:\\Solidity and Ethereum\\SmartContracts\\contracts\\Logger.sol",
  "ast": {
    "absolutePath": "project:/contracts/Logger.sol",
    "exportedSymbols": {
      "Logger": [
        196
      ]
    },
    "id": 197,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 182,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:2"
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "Logger",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": false,
        "id": 196,
        "linearizedBaseContracts": [
          196
        ],
        "name": "Logger",
        "nameLocation": "78:6:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "f42c13bf",
            "id": 187,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emitLog",
            "nameLocation": "101:7:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 183,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "108:2:2"
            },
            "returnParameters": {
              "id": 186,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 185,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 187,
                  "src": "140:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 184,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "140:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "139:9:2"
            },
            "scope": 196,
            "src": "92:57:2",
            "stateMutability": "pure",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 194,
              "nodeType": "Block",
              "src": "206:29:2",
              "statements": [
                {
                  "expression": {
                    "hexValue": "323030",
                    "id": 192,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "224:3:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_200_by_1",
                      "typeString": "int_const 200"
                    },
                    "value": "200"
                  },
                  "functionReturnParameters": 191,
                  "id": 193,
                  "nodeType": "Return",
                  "src": "217:10:2"
                }
              ]
            },
            "id": 195,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test3",
            "nameLocation": "166:5:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 188,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "171:2:2"
            },
            "returnParameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 190,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 195,
                  "src": "197:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 189,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "197:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "196:9:2"
            },
            "scope": 196,
            "src": "157:78:2",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 197,
        "src": "60:178:2",
        "usedErrors": []
      }
    ],
    "src": "32:702:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2023-02-01T07:09:11.533Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}